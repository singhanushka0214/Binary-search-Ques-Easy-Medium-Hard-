class Solution {
public:
int ceil(vector<int> &a, int n, int x){
    int ans = -1;
    int low = 0, high = n-1;
    while(low<=high){
        int mid = (low + high)/2;
        if(a[mid] >= x){
            ans = a[mid];
            high = mid-1;
        }
        else low = mid+1;
    }
    return ans;
}

int floor(vector<int> &arr, int n, int x){
	int low = 0, high = n - 1;
	int ans = -1;

	while (low <= high) {
		int mid = (low + high) / 2;
		if (arr[mid] <= x) {
			ans = arr[mid];
			low = mid + 1;
		}
		else {
			high = mid - 1;
		}
	}
	return ans;
}
    vector<int> getFloorAndCeil(vector<int> a, int x) {
        int n = a.size();
        int f = floor(a, n, x);
        int c= ceil(a, n, x);
        return {f, c};
    }
};
