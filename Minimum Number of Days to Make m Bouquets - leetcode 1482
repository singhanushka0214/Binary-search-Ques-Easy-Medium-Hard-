int possible(vector<int> &arr, int day, int m, int k) {
  int cnt = 0, noB = 0;
  for (int i = 0; i < arr.size(); i++){
	  if(arr[i] <= day) cnt++;
	  else{
		  noB += (cnt/k);
		  cnt = 0;
	  } 
  }
   noB += (cnt/k);
	  return noB >= m; 
}
int roseGarden(vector<int> arr, int k, int m)
{
	// Write your code here
    long long val = m * 1ll * k * 1ll;
    int n = arr.size();
    if (val > n) return -1;
    int mini = INT_MAX, maxi = INT_MIN;
    for (int i = 0; i < n; i++) {
        mini = min(mini, arr[i]);
        maxi = max(maxi, arr[i]);
    }

    //apply binary search:
    int low = mini, high = maxi;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (possible(arr, mid, m, k)) {
            high = mid - 1;
        }
        else low = mid + 1;
    }
    return low;
}
